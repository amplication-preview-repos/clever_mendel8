/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { YoutubePlaylistService } from "../youtubePlaylist.service";
import { YoutubePlaylistCreateInput } from "./YoutubePlaylistCreateInput";
import { YoutubePlaylist } from "./YoutubePlaylist";
import { YoutubePlaylistFindManyArgs } from "./YoutubePlaylistFindManyArgs";
import { YoutubePlaylistWhereUniqueInput } from "./YoutubePlaylistWhereUniqueInput";
import { YoutubePlaylistUpdateInput } from "./YoutubePlaylistUpdateInput";

export class YoutubePlaylistControllerBase {
  constructor(protected readonly service: YoutubePlaylistService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: YoutubePlaylist })
  async createYoutubePlaylist(
    @common.Body() data: YoutubePlaylistCreateInput
  ): Promise<YoutubePlaylist> {
    return await this.service.createYoutubePlaylist({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [YoutubePlaylist] })
  @ApiNestedQuery(YoutubePlaylistFindManyArgs)
  async youtubePlaylists(
    @common.Req() request: Request
  ): Promise<YoutubePlaylist[]> {
    const args = plainToClass(YoutubePlaylistFindManyArgs, request.query);
    return this.service.youtubePlaylists({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: YoutubePlaylist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async youtubePlaylist(
    @common.Param() params: YoutubePlaylistWhereUniqueInput
  ): Promise<YoutubePlaylist | null> {
    const result = await this.service.youtubePlaylist({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: YoutubePlaylist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateYoutubePlaylist(
    @common.Param() params: YoutubePlaylistWhereUniqueInput,
    @common.Body() data: YoutubePlaylistUpdateInput
  ): Promise<YoutubePlaylist | null> {
    try {
      return await this.service.updateYoutubePlaylist({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: YoutubePlaylist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteYoutubePlaylist(
    @common.Param() params: YoutubePlaylistWhereUniqueInput
  ): Promise<YoutubePlaylist | null> {
    try {
      return await this.service.deleteYoutubePlaylist({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
